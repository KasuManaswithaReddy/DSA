// TRANSPOSE OF A MATRIX PROBLEM.

//{ Driver Code Starts
#include <bits/stdc++.h> 
using namespace std; 

// } Driver Code Ends
class Solution
{   
    public:  
    //Function to find transpose of a matrix.
    void transpose(vector<vector<int> >& matrix, int n)
    { 
         vector<vector<bool>>visited(n,vector<bool>(n,false));
        // for(int i=0;i<n;i++){
        //     for(int j=0;j<n;j++){
        //         for(int k=j;k<n;k++){
        //             if(i==k)continue;
        //             if(visited[i][k]!=true&&visited[k][i]!=true){
        //                 swap(matrix[i][k],matrix[k][i]);
        //             }
        //             visited[i][k]=true;
        //             visited[k][i]=true;
        //         }
        //     }
        // }
        for(int i=0;i<n;i++){
            // for(int j=0;j<n;j++){
                for(int k=0;k<n;k++){
                    if(i==k)continue;
                    if(visited[i][k]!=true&&visited[k][i]!=true){
                        swap(matrix[i][k],matrix[k][i]);
                    }
                    visited[i][k]=true;
                    visited[k][i]=true;
                }
            // }
        }
    }
};

//{ Driver Code Starts.

int main() {
    int t;
    cin>>t;
    
    while(t--) 
    {
        int n;
        cin>>n;
        vector<vector<int> > matrix(n,vector<int>(n)); 

        for(int i=0; i<n; i++)
        {
            for( int j=0; j<n; j++)
            {
                cin>>matrix[i][j];
            }
        }

        Solution ob;
        ob.transpose(matrix,n);
        for (int i = 0; i < n; ++i)
        {
            for (int j = 0; j < n; ++j)
                cout<<matrix[i][j]<<" ";
            cout<<endl;
        }
    }
    return 0;
}
// } Driver Code Ends
