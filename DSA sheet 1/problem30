// Binary Heap Operations problem.

/*The structure of the class is
struct MinHeap
{
    int *harr;
    int capacity, heap_size;
    MinHeap(int cap) {heap_size = 0; capacity = cap; harr = new int[cap];}
    int extractMin();
    void deleteKey(int i);
    void insertKey(int k);
    int parent(int i);
    int left(int i);
    int right(int i);
};*/



//Function to extract minimum value in heap and then to store 
//next minimum value at first index.
int MinHeap::extractMin() 
{
    if(heap_size<=0){
        return -1;
    }
    if(heap_size==1){
        heap_size-=1;
        return harr[0];
    }
    int ele = harr[0];
    harr[0] = harr[heap_size - 1];
    harr[heap_size - 1] = 0;
    heap_size-=1;
    MinHeapify(0);
    
    return ele;
}

//Function to delete a key at ith index.
void MinHeap::deleteKey(int i)
{
    // Your code here
    if(i<heap_size){
        decreaseKey(i, INT_MIN);
        extractMin();
    }
}

//Function to insert a value in Heap.
void MinHeap::insertKey(int k) 
{
    // Your code here
    int i = heap_size;
    harr[i] = k;
    heap_size+=1;
    while(i!=0 && harr[i]<harr[parent(i)]){
        swap(harr[i], harr[parent(i)]);
        i = parent(i);
    }
}

//Function to change value at ith index and store that value at first index.
void MinHeap::decreaseKey(int i, int new_val) 
{
    harr[i] = new_val;
    while(i!=0 && harr[parent(i)]>harr[i]){
        swap(harr[i], harr[parent(i)]);
        i = parent(i);
    }
}

/* You may call below MinHeapify function in
   above codes. Please do not delete this code
   if you are not writing your own MinHeapify */
void MinHeap::MinHeapify(int i) 
{
    int l = left(i);
    int r = right(i);
    int small = i;
    if(l<heap_size && harr[l]<harr[small]){
        small = l;
    }
    if(r<heap_size && harr[r]<harr[small]){
        small = r;
    }
    if(small!=i){
        swap(harr[small], harr[i]);
        MinHeapify(small);
        }
}
