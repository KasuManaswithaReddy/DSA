// HEAP SORT PROBLEM.

class Solution{
  public:
    //Heapify function to maintain heap property.
    void heapify(int arr[], int n, int i)  
    {
        int largest = i; // Initialize largest as root
        int left = 2 * i + 1; // Left child
        int right = 2 * i + 2; // Right child

        // If left child is larger than root
        if (left < n && arr[left] > arr[largest])
            largest = left;

        // If right child is larger than largest so far
        if (right < n && arr[right] > arr[largest])
            largest = right;

        // If largest is not root
        if (largest != i) {
            swap(arr[i], arr[largest]);
            // Recursively heapify the affected sub-tree
            heapify(arr, n, largest);
        }
    }

    //Function to build a Heap from array.
    void buildHeap(int arr[], int n)  
    { 
        // Index of last non-leaf node
        int startIdx = (n / 2) - 1;
        
        // Perform heapify from last non-leaf node to root
        for (int i = startIdx; i >= 0; i--)
            heapify(arr, n, i);
    }

    //Function to sort an array using Heap Sort.
    void heapSort(int arr[], int n)
    {
        // Build max heap
        buildHeap(arr, n);
        
        // Extract elements one by one from heap
        for (int i = n - 1; i > 0; i--) {
            // Move current root to end
            swap(arr[0], arr[i]);
            // Call heapify on the reduced heap
            heapify(arr, i, 0);
        }
    }
},
