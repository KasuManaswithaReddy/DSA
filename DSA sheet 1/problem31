// Huffman Encoding

class Solution
{
public:
	 vector<string>ans; 
	struct Node {
    int data;
    Node *left, *right;
    
    Node(int data) {
        this->data = data;
        this->left = this->right = NULL;
    }
	 };
	 
	struct Comparison {
	 public:
    bool operator() (Node*a, Node*b) {
    return a->data > b->data; 
}
};
 
	 void fun(Node* root,string temp){
	     
	     if(root->left==NULL && root->right==NULL){
	         ans.push_back(temp);
	         return;
	     }
	     
	     fun(root->left,temp+"0");
	     fun(root->right,temp+"1");
	     
	 }
		vector<string> huffmanCodes(string S,vector<int> f,int N)
		{
		    
		     priority_queue<Node*, vector<Node*>, Comparison> pq;
		   for(int i=0;i<N;i++){
		       pq.push(new Node(f[i]));
		   }
		   
		   while(pq.size()>1){
		       
		       Node* left=pq.top();
		       pq.pop();
		       Node* right=pq.top();
		       pq.pop();
		       
		       Node* newNode=new Node(left->data+right->data);
		       newNode->left=left;
		       newNode->right=right;
		       pq.push(newNode);
		       
		   }
		   
		   Node* root=pq.top();
		  
		   string temp="";
		   
		   fun(root,temp);
		     return ans;
       }
  };
